package quiz.app;import javax.swing.*;import java.awt.*;import java.awt.event.*;public class Quiz extends JFrame implements ActionListener {    String questions[][] = new String[10][5];    String answers[][] = new String[10][2];    String useranswers[][] = new String[10][1];    JLabel qno, question;    JRadioButton opt1, opt2, opt3, opt4;    ButtonGroup groupoptions;    JButton next, submit, lifeline;    public static int timer = 60;    public static int ans_given = 0;    public static int count = 0;    public static int score = 0;    String name;    Quiz(String name) {        this.name = name;//        setBounds(50, 0, 1440, 850);        setBounds(0, 0, 1020, 602);//        setSize(800,650);        setLocation(200,100);//        setBackground(new Color(22,99,54));//        setSize(1020,602);        getContentPane().setBackground(Color.WHITE);        setUndecorated(true);        setLayout(null);        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/quiz.png"));        JLabel image = new JLabel(i1);        image.setBounds(0, 0, 1020, 279);        add(image);        qno = new JLabel();        qno.setBounds(50, 300, 50, 30);        qno.setFont(new Font("Tahoma", Font.PLAIN, 20));        add(qno);        question = new JLabel();        question.setBounds(100, 300, 900, 30);        question.setFont(new Font("Tahoma", Font.PLAIN, 20));        add(question);        questions[0][0] = "Which of the following is the extension for a Java source code file?";        questions[0][1] = ".py";        questions[0][2] = ".class";        questions[0][3] = ".java";        questions[0][4] = ".exe";        questions[1][0] = "What is the keyword used to define a class in Java?";        questions[1][1] = "function";        questions[1][2] = "define";        questions[1][3] = "class";        questions[1][4] = "create";        questions[2][0] = "Java is considered a ____ language.";        questions[2][1] = "Compiled";        questions[2][2] = "Interpreted";        questions[2][3] = "Both Compiled and Interpreted";        questions[2][4] = "Scripted";        questions[3][0] = "What is the data type used to store a single character in Java?";        questions[3][1] = "int";        questions[3][2] = "char";        questions[3][3] = "float";        questions[3][4] = "string";        questions[4][0] = "Which access modifier allows a member to access from anywhere?";        questions[4][1] = "private";        questions[4][2] = "protected";        questions[4][3] = "public";        questions[4][4] = "null";        questions[5][0] = "What symbol is used to comment out a single line of code in Java?";        questions[5][1] = "#";        questions[5][2] = "//";        questions[5][3] = "/* */";        questions[5][4] = "!";        questions[6][0] = "What must you print to the console to display text in Java?";        questions[6][1] = "write";        questions[6][2] = "display";        questions[6][3] = "System.out.println(); ";        questions[6][4] = "show";        questions[7][0] = "What is the data type used to store whole numbers in Java?";        questions[7][1] = "character";        questions[7][2] = "integer";        questions[7][3] = "decimal";        questions[7][4] = "string";        questions[8][0] = "How do you declare a variable in Java?";        questions[8][1] = "define name = value;";        questions[8][2] = "var name = value;";        questions[8][3] = "create name value;";        questions[8][4] = "make name = value;";        questions[9][0] = "The keyword that executes the code only if a condition is true is __.";        questions[9][1] = "for";        questions[9][2] = "while";        questions[9][3] = "if";        questions[9][4] = "else";        answers[0][1] = ".java";        answers[1][1] = "class";        answers[2][1] = "Both Compiled and Interpreted";        answers[3][1] = "char";        answers[4][1] = "public";        answers[5][1] = "//";        answers[6][1] = "System.out.println();";        answers[7][1] = "integer";        answers[8][1] = "var name = value;";        answers[9][1] = "if";        opt1 = new JRadioButton();        opt1.setBounds(120, 340, 700, 30);        opt1.setBackground(Color.WHITE);        opt1.setFont(new Font("Dialog", Font.PLAIN, 17));        add(opt1);        opt2 = new JRadioButton();        opt2.setBounds(120, 380, 700, 30);        opt2.setBackground(Color.WHITE);        opt2.setFont(new Font("Dialog", Font.PLAIN, 17));        add(opt2);        opt3 = new JRadioButton();        opt3.setBounds(120, 420, 700, 30);        opt3.setBackground(Color.WHITE);        opt3.setFont(new Font("Dialog", Font.PLAIN, 17));        add(opt3);        opt4 = new JRadioButton();        opt4.setBounds(120, 460, 700, 30);        opt4.setBackground(Color.WHITE);        opt4.setFont(new Font("Dialog", Font.PLAIN, 17));        add(opt4);        groupoptions = new ButtonGroup();        groupoptions.add(opt1);        groupoptions.add(opt2);        groupoptions.add(opt3);        groupoptions.add(opt4);        next = new JButton("Next");        next.setBounds(400, 550, 200, 30);        next.setFont(new Font("Tahoma", Font.PLAIN, 17));//        next.setBackground(new Color(22, 99, 54));//        next.setForeground(Color.WHITE);        next.addActionListener(this);        add(next);        lifeline = new JButton("Help");        lifeline.setBounds(600, 550, 200, 30);        lifeline.setFont(new Font("Tahoma", Font.PLAIN, 17));//        lifeline.setBackground(new Color(22, 99, 54));//        lifeline.setForeground(Color.WHITE);        lifeline.addActionListener(this);        add(lifeline);        submit = new JButton("Submit");        submit.setBounds(800, 550, 200, 30);        submit.setFont(new Font("Tahoma", Font.PLAIN, 17));//        submit.setForeground(Color.BLACK);//        submit.setBackground(new Color(255, 215, 0));        submit.addActionListener(this);        submit.setEnabled(false);        add(submit);        start(count);        setVisible(true);    }    public void actionPerformed(ActionEvent ae) {        if (ae.getSource() == next) {            repaint();            opt1.setEnabled(true);            opt2.setEnabled(true);            opt3.setEnabled(true);            opt4.setEnabled(true);            ans_given = 1;            if (groupoptions.getSelection() == null) {                useranswers[count][0] = "";            } else {                useranswers[count][0] = groupoptions.getSelection().getActionCommand();            }            if (count == 8) {                next.setEnabled(false);                submit.setEnabled(true);            }            count++;            start(count);        } else if (ae.getSource() == lifeline) {            opt1.setEnabled(false);            opt4.setEnabled(false);            lifeline.setEnabled(false);        } else if (ae.getSource() == submit) {            ans_given = 1;            if (groupoptions.getSelection() == null) {                useranswers[count][0] = "";            } else {                useranswers[count][0] = groupoptions.getSelection().getActionCommand();            }            for (int i = 0; i < useranswers.length; i++) {                if (useranswers[i][0].equals(answers[i][1])) {                    score += 10;                } else {                    score += 0;                }            }            setVisible(false);            new Score(name, score);        }    }    public void paint(Graphics g) {        super.paint(g);        String time = "Time left - " + timer + " seconds"; // 15        g.setColor(Color.RED);        g.setFont(new Font("Tahoma", Font.BOLD, 25));        if (timer > 0) {            g.drawString(time, 720, 300);        } else {            g.drawString("Times up!!", 720, 300);        }        timer--; // 14        try {            Thread.sleep(1000);            repaint();        } catch (Exception e) {            e.printStackTrace();        }        if (ans_given == 1) {            ans_given = 0;            timer = 60;        } else if (timer < 0) {            timer = 60;            opt1.setEnabled(true);            opt2.setEnabled(true);            opt3.setEnabled(true);            opt4.setEnabled(true);            if (count == 8) {                next.setEnabled(false);                submit.setEnabled(true);            }            if (count == 9) { // submit button                if (groupoptions.getSelection() == null) {                    useranswers[count][0] = "";                } else {                    useranswers[count][0] = groupoptions.getSelection().getActionCommand();                }                for (int i = 0; i < useranswers.length; i++) {                    if (useranswers[i][0].equals(answers[i][1])) {                        score += 10;                    } else {                        score += 0;                    }                }                setVisible(false);                new Score(name, score);            } else { // next button                if (groupoptions.getSelection() == null) {                    useranswers[count][0] = "";                } else {                    useranswers[count][0] = groupoptions.getSelection().getActionCommand();                }                count++; // 0 // 1                start(count);            }        }    }    public void start(int count) {        qno.setText("" + (count + 1) + ". ");        question.setText(questions[count][0]);        opt1.setText(questions[count][1]);        opt1.setActionCommand(questions[count][1]);        opt2.setText(questions[count][2]);        opt2.setActionCommand(questions[count][2]);        opt3.setText(questions[count][3]);        opt3.setActionCommand(questions[count][3]);        opt4.setText(questions[count][4]);        opt4.setActionCommand(questions[count][4]);        groupoptions.clearSelection();    }    public static void main(String[] args) {        new Quiz("User");    }}